#!/bin/bash
usage()
{
cat << EOF
usage: $0 <ilo> [fhqQrR]
   -f "<args>"  Pass args directly to ffmpeg. surround in quotes!
   -h           Show this message
   -i <url>     Input URL
   -l <url>     List available quality numbers for <url>
   -o <file>    Output file
   -q <num>     Set quality #
   -Q           Be silent
   -r <bit/s>   Video bitrate (ex: 1200k, default is same as input)
   -R <bit/s>   Audio bitrate (ex: 64k, default 128k)
EOF
}

QUIET=0
SHH=0
LIST=0
ABR="128k"
VBR="sameq"
PASS=
IN=
OUT=
QUAL="18"
while getopts "f:hi:l:o:q:Qr:R:" optname
  do
    case "$optname" in
      "Q")
        QUIET=1
        ;;
      "q")
        QUAL=$OPTARG
        ;;
      "r")
        VBR=$OPTARG
        ;;
      "R")
        ABR=$OPTARG
        ;;
      "l")
        LIST=1
        IN=$OPTARG
        SHH=1
        ;;
      "i")
        IN=$OPTARG
        ;;
      "o")
        OUT=$OPTARG
        ;;
      "f")
        PASS=$OPTARG
        ;;
      "h")
        usage
        exit 0
        ;;
      "?")
        usage
        exit 4
        ;;
      ":")
        echo "Missing required parameter for $optname"
        usage
        exit 4
        ;;
      *)
        echo "Unknown error while processing options"
        usage
        exit;
        ;;
    esac
  done


UA="'Mozilla/5.0 (X11; Linux x86_64; rv:2.2a1pre) Gecko/20110324 Firefox/4.2a1pre'"


# check input
##############
if [[ -z "$OUT" ]] || [[ -z "$IN" ]]; then
    if [[ "$LIST" == "0" ]]; then
        echo "Missing required parameter for in/out."
        usage
        exit 4
    fi
fi


# check ext if we're not listing
#################################
if [[ "$LIST" == "0" ]]; then
    EXT=`echo $OUT | awk -F . {'print $NF'}`
    ffmpeg -y /tmp/test.$EXT 2>&1 | grep "Unable to find">/dev/null
    if [[ "$?" != "1" ]]; then
        echo "ffmpeg error: encoding to $EXT not supported"
        exit 5
    else
        rm /tmp/test.$EXT
    fi
fi


# get youtube page (html)
##########################
if [[ "$QUIET" == "1" ]] || [[ "$SHH" == "1" ]]; then
    curl --user-agent "$UA" -o ytout "$IN" >/dev/null 2>&1
else
    echo "Get Page..."
    curl --user-agent "$UA" -o ytout "$IN"
fi

if [[ "$?" != "0" ]]; then
    echo "page wget failed"
    exit 1
fi


# get the formats
##################
FMTS=`cat ytout | grep "video_id=" | sed -e's/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g' | xargs echo -e | sed 's/;/;\n/g' | grep fmt_url | sed 's/,/\n/g' | sed 's/fmt_url_map=//g'`


# list formats (if selected)
#############################
if [[ "$LIST" == "1" ]]; then
    if [[ "$QUIET" == "0" ]]; then
        echo -en "Available fomat codes for $IN:\n   "
    fi
    for i in `echo "$FMTS"`; do
        echo -en "`echo $i | cut -d'|' -f1` "
    done
    echo ""
    exit 0;
fi


# get url
##########
URL=`echo "$FMTS"| grep "^$QUAL"| cut -d'|' -f2`
if [[ "$URL" == "" ]]; then
    #fall back to 18
    if [[ "$QUIET" == "0" ]]; then
        echo "Quality $QUAL not available- using 18"
    fi
    QUAL=18
    URL=`echo "$FMTS"| grep "^$QUAL"| cut -d'|' -f2`
fi

if [[ "$URL" == "" ]]; then
    #fall back to 5
    if [[ "$QUIET" == "0" ]]; then
        echo "Quality $QUAL not available- using 5"
    fi
    QUAL=5
    URL=`echo "$FMTS"| grep "^$QUAL"| cut -d'|' -f2`
fi


# get media file
#################
if [[ "$QUIET" == "1" ]]; then
    curl --user-agent "$UA" -o ytout.media -L "$URL" >/dev/null 2>&1
else
    echo "Get Video..."
    curl --user-agent "$UA" -o ytout.media -L "$URL"
fi

if [[ "$?" != "0" ]]; then
    echo "video wget failed"
    rm ytout
    exit 2
fi


# encode
#########
if [[ "$VBR" == "sameq" ]];then
    VBR="-$VBR"
else
    VBR="-b $VBR"
fi
if [[ "$QUIET" == "1" ]]; then
    ffmpeg -y -ab $ABR $VBR $PASS -i ytout.media $OUT >/dev/null 2>&1
else
    echo "Encode..."
    ffmpeg -y -ab $ABR $VBR $PASS -i ytout.media $OUT
    echo "Done!"
fi

# cleanup
##########
rm ytout ytout.media
